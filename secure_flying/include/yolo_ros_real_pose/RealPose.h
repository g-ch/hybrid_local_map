// Generated by gencpp from file yolo_ros_real_pose/RealPose.msg
// DO NOT EDIT!


#ifndef YOLO_ROS_REAL_POSE_MESSAGE_REALPOSE_H
#define YOLO_ROS_REAL_POSE_MESSAGE_REALPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace yolo_ros_real_pose
{
template <class ContainerAllocator>
struct RealPose_
{
  typedef RealPose_<ContainerAllocator> Type;

  RealPose_()
    : label()
    , confidence(0.0)
    , pix_lt_x(0)
    , pix_lt_y(0)
    , pix_rb_x(0)
    , pix_rb_y(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , head_yaw(0.0)
    , local_pose()  {
    }
  RealPose_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , confidence(0.0)
    , pix_lt_x(0)
    , pix_lt_y(0)
    , pix_rb_x(0)
    , pix_rb_y(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , head_yaw(0.0)
    , local_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef uint16_t _pix_lt_x_type;
  _pix_lt_x_type pix_lt_x;

   typedef uint16_t _pix_lt_y_type;
  _pix_lt_y_type pix_lt_y;

   typedef uint16_t _pix_rb_x_type;
  _pix_rb_x_type pix_rb_x;

   typedef uint16_t _pix_rb_y_type;
  _pix_rb_y_type pix_rb_y;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _head_yaw_type;
  _head_yaw_type head_yaw;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _local_pose_type;
  _local_pose_type local_pose;





  typedef boost::shared_ptr< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> const> ConstPtr;

}; // struct RealPose_

typedef ::yolo_ros_real_pose::RealPose_<std::allocator<void> > RealPose;

typedef boost::shared_ptr< ::yolo_ros_real_pose::RealPose > RealPosePtr;
typedef boost::shared_ptr< ::yolo_ros_real_pose::RealPose const> RealPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo_ros_real_pose::RealPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolo_ros_real_pose::RealPose_<ContainerAllocator1> & lhs, const ::yolo_ros_real_pose::RealPose_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.confidence == rhs.confidence &&
    lhs.pix_lt_x == rhs.pix_lt_x &&
    lhs.pix_lt_y == rhs.pix_lt_y &&
    lhs.pix_rb_x == rhs.pix_rb_x &&
    lhs.pix_rb_y == rhs.pix_rb_y &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.head_yaw == rhs.head_yaw &&
    lhs.local_pose == rhs.local_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolo_ros_real_pose::RealPose_<ContainerAllocator1> & lhs, const ::yolo_ros_real_pose::RealPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolo_ros_real_pose

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0fe8c640155f51de92b1362afd9ff9a7";
  }

  static const char* value(const ::yolo_ros_real_pose::RealPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0fe8c640155f51deULL;
  static const uint64_t static_value2 = 0x92b1362afd9ff9a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_ros_real_pose/RealPose";
  }

  static const char* value(const ::yolo_ros_real_pose::RealPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label\n"
"float32 confidence\n"
"uint16 pix_lt_x\n"
"uint16 pix_lt_y\n"
"uint16 pix_rb_x\n"
"uint16 pix_rb_y\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 head_yaw\n"
"geometry_msgs/Pose local_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::yolo_ros_real_pose::RealPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.confidence);
      stream.next(m.pix_lt_x);
      stream.next(m.pix_lt_y);
      stream.next(m.pix_rb_x);
      stream.next(m.pix_rb_y);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.head_yaw);
      stream.next(m.local_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RealPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo_ros_real_pose::RealPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo_ros_real_pose::RealPose_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "pix_lt_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pix_lt_x);
    s << indent << "pix_lt_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pix_lt_y);
    s << indent << "pix_rb_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pix_rb_x);
    s << indent << "pix_rb_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pix_rb_y);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "head_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.head_yaw);
    s << indent << "local_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.local_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_ROS_REAL_POSE_MESSAGE_REALPOSE_H
